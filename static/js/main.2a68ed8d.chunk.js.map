{"version":3,"sources":["lib/markup/photodiode.js","lib/markup/stimuli.js","config/trigger.js","lib/utils.js","trials/camera.js","config/main.js","components/Login.jsx","lib/markup/eventMarkerMessage.js","trials/holdUpMarker.js","trials/startCode.js","trials/adjustVolume.js","timelines/preamble.js","timelines/main.js","lib/taskUtils.js","trials/movingDot.js","lib/markup/fixation.js","trials/eyesTask.js","trials/instructions.js","components/JsPsychExperiment.jsx","firebase.js","App.jsx","index.js"],"names":["__webpack_require__","d","__webpack_exports__","photodiodeGhostBox","pdSpotEncode","_config_main__WEBPACK_IMPORTED_MODULE_0__","_config_trigger__WEBPACK_IMPORTED_MODULE_1__","ipcRenderer","config","USE_ELECTRON","electron","window","require","class_","USE_PHOTODIODE","concat","taskCode","numBlinks","eventCodes","open_task","repeat_pulse_for","ms","i","callback","document","getElementById","setAttribute","setTimeout","pulse_for","send","baseStimulus","element","prompt","arguments","length","undefined","centered","module","exports","test_connect","left","right","up","down","center","yawn","start","stop","events","rest","removeCursor","sleep","getProlificId","getTurkUniqueId","beep","jspsych_react__WEBPACK_IMPORTED_MODULE_0__","elementId","classList","add","Promise","resolve","turkInfo","jsPsych","turk","workerId","assignmentId","variable","vars","location","search","substring","split","pair","decodeURIComponent","getQueryVariable","audioCodes","context","AudioContext","o","createOscillator","g","createGain","type","connect","frequency","setValueAtTime","console","log","currentTime","destination","cameraStart","title","taskName","markup","lang","instructions","camera","stimulus","choices","continue","button","response_ends_trial","on_load","participantId","data","get","values","participant_id","handleEvents","stream","recorder","srcObject","recordedChunks","MediaRecorder","mimeType","addEventListener","e","size","push","blob","media","reader","FileReader","fileName","Date","now","onload","readyState","buffer","Buffer","result","JSON","stringify","readAsArrayBuffer","saveBlob","Blob","navigator","mediaDevices","getUserMedia","video","then","desktopCapturer","getSources","types","_ref","Object","_home_runner_work_task_movement_task_movement_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_runner_work_task_movement_task_movement_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","sources","_iterator","_step","source","wrap","_context","prev","next","_home_runner_work_task_movement_task_movement_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_createForOfIteratorHelper__WEBPACK_IMPORTED_MODULE_1__","s","n","done","value","name","mandatory","chromeMediaSource","chromeMediaSourceId","id","catch","error","err","f","_x","apply","this","on_finish","USE_CAMERA","cameraCapture","screenCapture","alert","cameraEnd","duration","task","recording_end","trial_duration","lodash__WEBPACK_IMPORTED_MODULE_1__","lodash__WEBPACK_IMPORTED_MODULE_1___default","_trigger__WEBPACK_IMPORTED_MODULE_2__","_brown_ccv_behavioral_task_trials__WEBPACK_IMPORTED_MODULE_3__","_lib_utils__WEBPACK_IMPORTED_MODULE_4__","USE_MTURK","outsideTurk","USE_PROLIFIC","USE_FIREBASE","process","REACT_APP_FIREBASE","_unused","REACT_APP_VIDEO","USE_EEG","mlang","_","merge","init","USE_VOLUME","Login","onLogin","envParticipantId","envStudyId","validationFunction","_useState","useState","_useState2","slicedToArray","setParticipant","_useState3","_useState4","studyId","setStudy","_useState5","_useState6","setError","useEffect","react_default","createElement","className","role","Form","onSubmit","preventDefault","loggedIn","Group","controlId","Label","Control","autoFocus","onChange","target","Button","style","width","block","disabled","eventMarkerMessage","asyncToGenerator","regenerator_default","abrupt","eventMarker","found","holdUpMarker","focus","innerHTML","startCode","setting_up","adjustVolume","adjust_volume","press","timeline","showMessage","responseType","message","responseEndsTrial","buttons","preamble","moveDot","position","gain","exponentialRampToValueAtTime","moveBlock","rt","code","timestamp","_x2","_x3","_x4","_x5","movingDot","direction","moveThree","_ref2","_callee2","_context2","_x6","_x7","_x8","_x9","async","func","container","getElementsByClassName","eyesTask","option","index","NO_KEYS","_on_load","trial","write","language","primaryTimeline","moving_dot","splice","end","mturkTimeline","tl","JsPsychExperiment","dataUpdateFunction","dataFinishFunction","experiment","settings","on_data_update","apiKey","REACT_APP_apiKey","authDomain","REACT_APP_authDomain","databaseURL","REACT_APP_databaseURL","projectId","REACT_APP_projectId","storageBucket","REACT_APP_storageBucket","messagingSenderId","REACT_APP_messagingSenderId","appId","REACT_APP_appId","db","firebase","initializeApp","firestore","hostname","useEmulator","initParticipant","startDate","collection","doc","set","start_time","app_version","appVersion","app_platform","platform","results","addToFirebase","study_id","start_date","update","FieldValue","arrayUnion","App","toISOString","setLogin","setRenderer","psiturk","setPsiturk","_useState7","_useState8","setEnvParticipantId","_useState9","_useState10","setEnvStudyId","_useState11","_useState12","currentMethod","setMethod","_useState13","_useState14","reject","setReject","query","URLSearchParams","defaultValidation","defaultFunction","setLoggedIn","useCallback","addProperties","task_version","version","credentials","sendSync","lodash","noConflict","turkId","PsiTurk","pID","Fragment","components_JsPsychExperiment","desktop","mturk","recordTrialData","default","saveData","completeHIT","completePsiturk","components_Login","ReactDOM","render","src_App"],"mappings":"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","file":"static/js/main.2a68ed8d.chunk.js","sourcesContent":["import { config } from  '../../config/main'\nimport { eventCodes } from '../../config/trigger'\n\n// conditionally load electron and psiturk based on MTURK config variable\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n}\n\n// Relies on styling in App.css, generate PD spot\nconst photodiodeGhostBox = () => {\n\tconst class_ = (config.USE_PHOTODIODE) ? 'visible' : 'invisible'\n\n  const markup = `<div class=\"photodiode-box ${class_}\" id=\"photodiode-box\">\n\t\t\t\t\t\t\t\t\t<span id=\"photodiode-spot\" class=\"photodiode-spot\"></span>\n  \t\t\t\t\t\t\t\t</div>`\n\treturn markup\n}\n\nconst pdSpotEncode = (taskCode) => {\n  function pulse_for(ms, callback) {\n      document.getElementById('photodiode-spot').setAttribute(\"style\", \"background-color: white\")\n      setTimeout(() => {\n        document.getElementById('photodiode-spot').setAttribute(\"style\", \"background-color: black\")\n        callback()\n      }, ms)\n    }\n\n    function repeat_pulse_for(ms, i) {\n      if (i > 0) {\n        pulse_for(ms, () => {\n          setTimeout(() => {\n            repeat_pulse_for(ms, i-1)\n          }, ms)\n        })\n      }\n    }\n\n\t\tif (config.USE_PHOTODIODE) {\n\t\t\t\tconst blinkTime = 40\n\t\t\t\tlet numBlinks = taskCode\n\t\t    if (taskCode < eventCodes.open_task) numBlinks = 1;\n\t\t\t\trepeat_pulse_for(blinkTime, numBlinks)\n\t\t\t\tif ( ipcRenderer ) ipcRenderer.send('trigger', taskCode)\n\t\t\t}\n\t\t}\n\nexport {\n\tphotodiodeGhostBox,\n\tpdSpotEncode\n}\n","const baseStimulus = (element, prompt = false, centered = false) => {\n  const class_ = centered\n    ? \"center_container\"\n    : prompt\n    ? \"main-prompt\"\n    : \"main\";\n  return `<div class=${class_}>${element}</div>`;\n};\n\nexport { baseStimulus };\n","// NOTE - these event codes must match what is in public/config/trigger.js\nconst eventCodes = {\n  test_connect: 32,\n  open_task: 12,\n  left: 1,\n  right: 2,\n  up: 3,\n  down: 4,\n  center: 5,\n  yawn: {\n    start: 6,\n    stop: 7,\n  },\n  events: {\n    start: 8,\n    stop: 9,\n  },\n  rest: {\n    start: 10,\n    stop: 11,\n  },\n};\n\n// this is module.exports isntead of just exports as it is also imported into the electron app\nmodule.exports = {\n  eventCodes,\n};\n","import { jsPsych } from 'jspsych-react'\n\nconst removeCursor = (elementId) => {\n  let element = document.getElementById(elementId);\n  element.classList.add(\"nocursor\");\n}\n\nconst addCursor = (elementId) => {\n  let element = document.getElementById(elementId);\n  element.classList.remove(\"nocursor\");\n}\n\nconst sleep = (ms) => {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n// add a random number between 0 and offset to the base number\nconst jitter = (base, offset) => (\n  base + Math.floor(Math.random() * Math.floor(offset))\n)\n\n// add a random number between 0 and 50 to the base number\nconst jitter50 = (base) => jitter(base, 50)\n\n// flip a coin\nconst randomTrue = () => Math.random() > 0.5\n\n// deeply copy an object\nconst deepCopy = (obj) => JSON.parse(JSON.stringify(obj))\n\n// format a number as a dollar amount\nconst formatDollars = (amount) => '$' + parseFloat(amount).toFixed(2)\n\n\n// create a pre-trial wait period\nconst generateWaitSet = (trial, waitTime) => {\n  let waitTrial = Object.assign({}, trial)\n  waitTrial.trial_duration = waitTime\n  waitTrial.response_ends_trial = false\n  waitTrial.prompt = '-'\n\n  return [waitTrial, trial]\n}\n\nconst keypressResponse = (info) => {\n  const data = {\n    key_press: info.key\n  }\n\n  jsPsych.finishTrial(data)\n}\n\nconst startKeypressListener = () => {\n  let keyboardListener = jsPsych.pluginAPI.getKeyboardResponse({\n    callback_function: keypressResponse,\n    valid_responses: jsPsych.ALL_KEYS,\n    persist: false\n  })\n\n  return keyboardListener\n}\n\nconst getTurkUniqueId = () => {\n  const turkInfo = jsPsych.turk.turkInfo()\n  const uniqueId = `${turkInfo.workerId}:${turkInfo.assignmentId}`\n  return uniqueId\n}\n\nconst getQueryVariable = (variable) => {\n  let query = window.location.search.substring(1);\n  let vars = query.split(\"&\");\n  for (let i = 0; i < vars.length; i++) {\n    let pair = vars[i].split(\"=\");\n    if (decodeURIComponent(pair[0]) === variable) {\n      return decodeURIComponent(pair[1]);\n    }\n  }\n};\n\nconst getProlificId = () => {\n  const prolificId = getQueryVariable(\"PROLIFIC_PID\");\n  return prolificId\n};\n\nconst beep = (audioCodes) => {\n  const context = new AudioContext()\n  const o = context.createOscillator()\n  const g = context.createGain()\n  o.type = audioCodes.type\n  o.connect(g)\n  o.frequency.setValueAtTime(audioCodes.frequency, 0)\n  console.log(context.currentTime)\n  g.connect(context.destination)\n  o.start()\n  o.stop(context.currentTime + 0.4)\n}\n\n\nexport {\n  removeCursor,\n  addCursor,\n  sleep,\n  jitter,\n  jitter50,\n  randomTrue,\n  deepCopy,\n  formatDollars,\n  generateWaitSet,\n  startKeypressListener,\n  getProlificId,\n  getTurkUniqueId,\n  beep\n}\n","import { lang, taskName, config} from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { jsPsych } from 'jspsych-react'\n\n\nlet ipcRenderer = false;\nif (config.USE_ELECTRON) {\n  const electron = window.require('electron');\n  ipcRenderer  = electron.ipcRenderer;\n}\n\nfunction saveBlob(blob, media, participantId) {\n  let reader = new FileReader()\n  let fileName =`pid_${participantId}_${media}_${Date.now()}.webm`\n  reader.onload = function() {\n      if (reader.readyState === 2) {\n          var buffer = new Buffer(reader.result)\n          ipcRenderer.send('save_video', fileName, buffer)\n          console.log(`Saving ${JSON.stringify({ fileName, size: blob.size })}`)\n      }\n  }\n  reader.readAsArrayBuffer(blob)\n}\n\nconst cameraStart = () => {\n  document.title = taskName\n  let markup = `\n  <div class=\"d-flex flex-column align-items-center\">\n  <p>${lang.instructions.camera}</p>\n  <video id=\"camera\" width=\"640\" height=\"480\" autoplay></video>\n  </div>\n  `\n  let stimulus = baseStimulus(markup, true) +\n                 photodiodeGhostBox()\n\n  return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    choices: [ lang.prompt.continue.button],\n    response_ends_trial: true,\n    on_load: () => {\n      // Grab elements, create settings, etc.\n      // Elements for taking the snapshot\n      const participantId = jsPsych.data.get().values()[0].participant_id\n\n      let camera = document.getElementById('camera');\n\n\n      const handleEvents = function(stream, recorder) {\n        console.log(stream)\n        if (recorder === \"cameraCapture\") {\n          camera.srcObject = stream;\n        }\n      \n        \n        const options = {mimeType: 'video/webm'};\n        const recordedChunks = [];\n        window[recorder] = new MediaRecorder(stream, options);\n    \n        window[recorder].addEventListener('dataavailable', function(e) {\n          if (e.data.size > 0) {\n            recordedChunks.push(e.data);\n          }\n        });\n    \n        window[recorder].addEventListener('stop', function() {\n          const blob = new Blob(recordedChunks)\n          saveBlob(blob, recorder, participantId)\n        });\n    \n      };\n    \n      navigator.mediaDevices.getUserMedia({ video: true })\n          .then((stream) => handleEvents(stream, 'cameraCapture'));\n\n      const { desktopCapturer } = window.require('electron')\n\n      desktopCapturer.getSources({ types: ['window'] }).then(async sources => {\n        for (const source of sources) {\n          if (source.name === taskName) {\n            navigator.mediaDevices.getUserMedia({\n              video: {\n                mandatory: {\n                  chromeMediaSource: 'desktop',\n                  chromeMediaSourceId: source.id\n                }\n              }\n            }).then(stream => {\n              handleEvents(stream, 'screenCapture')\n            })\n            .catch(error => console.log(error))\n          } \n        }\n      })\n    \n    },\n    on_finish: () => {\n      if (config.USE_CAMERA) {\n        try {\n          window.cameraCapture.start()\n          window.screenCapture.start()\n        } catch (error) {\n          window.alert(\"Camera permissions were not given, if you choose to proceed, your recording will not be saved. Please restart the experiment after you have given permission.\")\n        }\n        \n      }\n    }\n  }\n}\n\nconst cameraEnd = (duration) => {\n  let stimulus = baseStimulus(`<h1>${lang.task.recording_end}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: duration,\n    on_load: () => {\n      if (config.USE_CAMERA) {\n        console.log('finished')\n        try {\n          window.cameraCapture.stop()\n          window.screenCapture.stop()\n        } catch (error) {\n          window.alert(\"Your video recording was not saved\")\n        }\n        \n      }\n    }\n  }\n}\n\n\nexport {\n  cameraStart,\n  cameraEnd\n}","// config/main.js\n// This is the main configuration file where universal and default settings should be placed.\n// These settins can then be imported anywhere in the app as they are exported at the botom of the file.\n\nimport { jsPsych } from \"jspsych-react\";\nimport _ from \"lodash\";\nimport { eventCodes } from \"./trigger\";\nimport { init } from \"@brown-ccv/behavioral-task-trials\";\nimport { getProlificId } from \"../lib/utils\";\n\n// mapping of letters to key codes\nconst keys = {\n  A: 65,\n  B: 66,\n  C: 67,\n  F: 70,\n  J: 74,\n  space: 32,\n};\n\n// audio codes\nconst audioCodes = {\n  frequency: 100 * (eventCodes.open_task - 9),\n  type: \"sine\",\n};\n\nconst taskName = \"Movement\";\n\n// is this mechanical turk?\nlet USE_MTURK = !jsPsych.turk.turkInfo().outsideTurk;\nlet USE_PROLIFIC = getProlificId() && !USE_MTURK;\nlet USE_ELECTRON = true;\nlet USE_FIREBASE = process.env.REACT_APP_FIREBASE === \"true\";\n\ntry {\n  window.require(\"electron\");\n} catch {\n  USE_ELECTRON = false;\n}\n\n\n// whether or not to ask the participant to adjust the volume\nconst USE_VOLUME = process.env.REACT_APP_VOLUME === \"true\";\n// these variables depend on USE_ELECTRON\n// whether or not to enable video\nconst USE_CAMERA = process.env.REACT_APP_VIDEO === \"true\" && USE_ELECTRON;\n// whether or not the EEG/event marker is available\nconst USE_EEG =\n  process.env.REACT_APP_USE_EEG === \"true\" && USE_ELECTRON;\n// whether or not the photodiode is in use\nconst USE_PHOTODIODE =\n  process.env.REACT_APP_USE_PHOTODIODE === \"true\" && USE_ELECTRON;\n\n// get language file\nconst lang = require(\"../language/en_us.json\");\nif (!USE_ELECTRON) {\n  // if this is mturk, merge in the mturk specific language\n  const mlang = require(\"../language/en_us.mturk.json\");\n  _.merge(lang, mlang);\n}\n\nconst defaultBlockSettings = {\n  conditions: [\"a\", \"b\", \"c\"],\n  repeats_per_condition: 1, // number of times every condition is repeated\n  is_practice: false,\n  is_tutorial: false,\n  photodiode_active: false,\n};\n\n// setting config for trials\nconst config = init({\n  USE_PHOTODIODE,\n  USE_EEG,\n  USE_ELECTRON,\n  USE_MTURK,\n  USE_VOLUME,\n  USE_CAMERA,\n  USE_PROLIFIC,\n  USE_FIREBASE\n});\n\nexport {\n  taskName,\n  keys,\n  defaultBlockSettings,\n  lang,\n  eventCodes,\n  config,\n  audioCodes,\n};\n","import React, { useState, useEffect } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\n\nfunction Login({ onLogin, envParticipantId, envStudyId, validationFunction }) {\n  // State variables for login screen\n  const [participantId, setParticipant] = useState(\"\");\n  const [studyId, setStudy] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    // Update based on environment variables\n    setParticipant(envParticipantId);\n    setStudy(envStudyId);\n  }, [envParticipantId, envStudyId]);\n\n  // Checks if forms are filled in\n  function validateForm() {\n    return participantId.length > 0 && studyId.length > 0;\n  }\n\n  // Function to log in participant\n  function handleSubmit(e) {\n    e.preventDefault();\n    // Validates fields\n    validationFunction(participantId, studyId)\n    // Logs in depending on result from promise\n    .then((loggedIn) => {\n      if (loggedIn) {\n        onLogin(loggedIn, studyId, participantId);\n      } else {\n        setError(true);\n      }\n    });\n  }\n\n  return (\n    <div className=\"centered-h-v\">\n      <div className=\"width-50\">\n        {error ? (\n          <div className=\"alert alert-danger\" role=\"alert\">\n            The participant ID and study ID do not match\n          </div>\n        ) : null}\n        <Form className=\"centered-h-v\" onSubmit={handleSubmit}>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"participantId\">\n            <Form.Label>Participant ID</Form.Label>\n            <Form.Control\n              autoFocus\n              type=\"participantId\"\n              value={participantId}\n              onChange={(e) => setParticipant(e.target.value)}\n            />\n          </Form.Group>\n          <Form.Group className=\"width-100\" size=\"lg\" controlId=\"studyId\">\n            <Form.Label>Study ID</Form.Label>\n            <Form.Control\n              type=\"studyId\"\n              value={studyId}\n              onChange={(e) => setStudy(e.target.value)}\n            />\n          </Form.Group>\n          <Button\n            style={{ width: \"100%\" }}\n            block\n            size=\"lg\"\n            type=\"submit\"\n            disabled={!validateForm()}\n          >\n            Log In\n          </Button>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import { lang } from '../../config/main'\n\nconst eventMarkerMessage = async () => {\n\t\treturn `<span style=\"color: green;\">${lang.eventMarker.found}</span>`\n}\n\nexport default eventMarkerMessage\n","import { lang } from '../config/main'\nimport { photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport eventMarkerMessage from '../lib/markup/eventMarkerMessage'\n\nconst holdUpMarker = () => {\n  let stimulus = baseStimulus(`<div><h2 id='usb-alert'></h2></div>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_button_response',\n    stimulus: stimulus,\n    prompt: [`<br><h3>${lang.prompt.focus}</h3>`],\n    choices: [lang.prompt.continue.button],\n    on_load: () => (eventMarkerMessage()\n                      .then(s => document.getElementById('usb-alert')\n                      .innerHTML = s )\n                    )\n  }\n}\n\nexport default holdUpMarker\n","import { eventCodes, lang, audioCodes } from '../config/main'\nimport { photodiodeGhostBox, pdSpotEncode } from '../lib/markup/photodiode'\nimport { baseStimulus } from '../lib/markup/stimuli'\nimport { beep } from '../lib/utils'\n\nconst startCode = () => {\n  let stimulus = baseStimulus(`<h1>${lang.prompt.setting_up}</h1>`, true) + photodiodeGhostBox()\n\n   return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    trial_duration: 2000,\n    on_load: () => {\n      pdSpotEncode(eventCodes.open_task)\n      beep(audioCodes)\n    }\n  }\n}\n\nexport default startCode\n","import { lang } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst adjustVolume = () => {\n    const stimulus = baseStimulus(`\n    <div class='instructions'>\n    <h1>${lang.instructions.adjust_volume}</h1>\n    </div>\n    `, true)\n    \n    return {\n        type: 'html_keyboard_response',\n        stimulus: stimulus,\n        prompt:  lang.prompt.continue.press,\n        response_ends_trial: true\n    }\n}\n\nexport default adjustVolume","import holdUpMarker from \"../trials/holdUpMarker\";\nimport startCode from \"../trials/startCode\"\nimport adjustVolume from \"../trials/adjustVolume\"\nimport { lang, config } from \"../config/main\";\nimport { showMessage } from \"@brown-ccv/behavioral-task-trials\";\n\nlet timeline = [showMessage(config, {\n  responseType: \"html_button_response\",\n  message: lang.task.name,\n  responseEndsTrial: true,\n  buttons: [lang.prompt.continue.button],\n})]\nif (config.USE_VOLUME) {\n  timeline.push(adjustVolume())\n}\nif (config.USE_PHOTODIODE) {\n  timeline.push(holdUpMarker())\n  timeline.push(startCode())\n}\n\nconst preamble = {\n  type: \"html_keyboard_response\",\n  stimulus: \"\",\n  timeline: timeline\n};\n\n\n\nexport default preamble;\n","import preamble from \"./preamble\";\nimport movingDot from '../trials/movingDot'\nimport eyesTask from  '../trials/eyesTask'\nimport { instructions, initialInstructions } from '../trials/instructions'\nimport { cameraStart, cameraEnd } from \"../trials/camera\"\nimport { lang, config } from \"../config/main\";\nimport { showMessage } from \"@brown-ccv/behavioral-task-trials\";\n\n\n\nlet primaryTimeline = [\n  preamble,\n  initialInstructions(),\n  movingDot('left'),\n  movingDot('right'),\n  movingDot('up'),\n  movingDot('down'),\n  instructions(lang.instructions.yawn),\n  eyesTask('yawn'),\n  instructions(lang.instructions.yawn),\n  eyesTask('yawn'),\n  \n];\nfor (let i = 0; i < lang.instructions.events.length; i++) {\n  primaryTimeline.push(instructions(lang.instructions.events[i]));\n  primaryTimeline.push(eyesTask('events',i))\n}\nif (config.USE_CAMERA) {\n  primaryTimeline.splice(1,0,cameraStart())\n  primaryTimeline.push(cameraEnd(5000))\n}\nprimaryTimeline.push(showMessage(config, {\n  duration: 5000,\n  message: lang.task.end,\n}))\n\nconst mturkTimeline = [\n  preamble,\n];\n\nexport const tl = config.USE_MTURK ? mturkTimeline : primaryTimeline;\n","// utilities specific to this app/task\nimport _ from 'lodash'\n\n// initialize starting conditions for each trial within a block\nconst generateStartingOpts = (blockSettings) => {\n\tlet startingOptions = blockSettings.conditions.map( (c) => {\n\t\t// Repeat each starting condition the same number of times\n\t\treturn _.range(blockSettings.repeats_per_condition).map( () => c )\n\t})\n\n\treturn _.shuffle(_.flatten(startingOptions))\n}\n\nconst moveDot = (position) => {\n\tconst p = document.getElementById(\"fixation-container\")\n\tp.setAttribute('class', `move-${position}`);\n  }\n\nconst beep = () => {\n\tconst context = new AudioContext()\n\tconst o = context.createOscillator()\n\tconst g = context.createGain()\n\to.type = 'sine'\n\to.connect(g)\n\tg.connect(context.destination)\n\to.start()\n\tg.gain.exponentialRampToValueAtTime(\n\t\t  0.0000001, context.currentTime + 1\n\t\t  )\n}\n\nconst sleep = (ms) => {\n\treturn new Promise(resolve => setTimeout(resolve, ms));\n}\n\nexport {\n\tgenerateStartingOpts,\n\tmoveDot,\n\tsleep,\n\tbeep\n}\n","import { fixationHTML } from '../lib/markup/fixation'\nimport { pdSpotEncode, photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { moveDot, sleep } from '../lib/taskUtils'\nimport { removeCursor } from '../lib/utils'\nimport { eventCodes } from '../config/trigger'\n\nconst moveBlock = async(duration, position, start, eventCodes, data) => {\n  const rt = () => Date.now() - start\n  const code = eventCodes[position]\n\n  await sleep(duration)\n  moveDot(position)\n  pdSpotEncode(code)\n  data.push({code: code, rt: rt(), timestamp: Date.now()})\n}\n\nconst movingDot = (direction) => {\n  let stimulus = fixationHTML + photodiodeGhostBox()\n\n  const moveThree = async(position, data, start, eventCodes) => {\n\n    if (position === 'left') {\n      data.push({code: eventCodes.center, rt: 0, timestamp: Date.now()})\n      pdSpotEncode(eventCodes['center'])\n    }\n\n    await moveBlock(5000, position, start, eventCodes, data)\n    await moveBlock(2000, 'center', start, eventCodes, data)\n    await moveBlock(2000, position, start, eventCodes, data)\n    await moveBlock(2000, 'center', start, eventCodes, data)\n    await moveBlock(2000, position, start, eventCodes, data)\n    await moveBlock(2000, 'center', start, eventCodes, data)\n    console.log(data)\n  }\n\n  return {\n    'type': 'call_function',\n    'async': true,\n     func: (done) => {\n       removeCursor('experiment')\n\n      const start = Date.now()\n      let data = []\n\n      // add stimulus to the DOM\n      document.getElementById('jspsych-content').innerHTML = stimulus\n      let container = document.getElementsByClassName(\"jspsych-content-wrapper\")[0];\n      container.setAttribute('class', 'fixation-container');\n      moveThree(direction, data, start, eventCodes)\n      let timeOut = (direction === 'down') ? 17000 : 15100\n      setTimeout(\n         () => done({direction: direction, code: eventCodes[direction], start: start, data: data}),\n         timeOut)\n      container.setAttribute('class', 'jspsych-content-wrapper')\n    }\n  }\n}\n\nexport default movingDot","export const fixationHTML = '<div id=\"fixation-container\"><div id=\"fixation-dot\"> </div></div>'","import { jsPsych } from 'jspsych-react'\nimport { pdSpotEncode, photodiodeGhostBox } from '../lib/markup/photodiode'\nimport { sleep, beep } from '../lib/taskUtils'\nimport { eventCodes } from '../config/trigger'\nimport { lang } from '../config/main'\n\nconst eyesTask = (option, index) => {\n  let stimulus = `<div id=\"dot-container\"><h3>${lang[option]}</h3></div>` + photodiodeGhostBox()\n  if (index>=0) {\n    stimulus = `<div id=\"dot-container\"><h3>${lang[option][index]}</h3></div>` + photodiodeGhostBox()\n  }\n\n  return {\n    'type': 'html_keyboard_response',\n    'choices': jsPsych.NO_KEYS,\n    'stimulus': stimulus,\n    'trial_duration': 11000,\n    'on_load': async () => {\n      let start = Date.now()\n      let code = eventCodes[option]\n      let data = []\n      pdSpotEncode(code.start)\n      beep()\n      data.push({trial: option, code: code.start, rt: Date.now() - start })\n      await sleep(10000)\n      pdSpotEncode(code.stop)\n      beep()\n      data.push({trial: option, code: code.stop, rt: Date.now() - start })\n      jsPsych.data.write(data)\n    }\n  }\n}\n\nexport default eyesTask","import { lang } from '../config/main'\nimport { baseStimulus } from '../lib/markup/stimuli'\n\nconst initialInstructions = () => {\n  const stimulus = baseStimulus(`\n  <div class='instructions'>\n  <h1>${lang.instructions.moving_dot}</h1>\n  </div>\n  `, true)\n  return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    prompt:  lang.prompt.continue.press,\n    response_ends_trial: true\n  }\n}\n\nconst instructions = (language) => {\n  const stimulus = baseStimulus(`\n    <div class='instructions'>\n    <h1>${language}</h1>\n    </div>\n    `, true)\n\n  return {\n    type: 'html_keyboard_response',\n    stimulus: stimulus,\n    prompt:  lang.prompt.continue.press,\n    response_ends_trial: true\n  }\n}\n\nexport {\n  instructions,\n  initialInstructions\n}","import React from \"react\";\nimport { Experiment } from \"jspsych-react\";\nimport { tl } from \"../timelines/main\";\n\nfunction JsPsychExperiment({ dataUpdateFunction, dataFinishFunction }) {\n\n  return (\n    <div className=\"App\">\n      <Experiment\n        settings={{\n          timeline: tl,\n          on_data_update: (data) => dataUpdateFunction(data),\n          on_finish: (data) => dataFinishFunction(data),\n        }}\n      />\n    </div>\n  );\n}\nexport default JsPsychExperiment;\n","import firebase from \"firebase\";\nimport 'firebase/firestore';\n\nrequire(\"dotenv\").config();\n\n// Set collection name\nconst collectionName = \"participant_responses\";\n\n// Firebase config\nlet config = {\n  apiKey: process.env.REACT_APP_apiKey,\n  authDomain: process.env.REACT_APP_authDomain,\n  databaseURL: process.env.REACT_APP_databaseURL,\n  projectId: process.env.REACT_APP_projectId || \"no-firebase\",\n  storageBucket: process.env.REACT_APP_storageBucket,\n  messagingSenderId: process.env.REACT_APP_messagingSenderId,\n  appId: process.env.REACT_APP_appId,\n};\n\n\n// Get a Firestore instance\nvar db = firebase.initializeApp(config).firestore();\n\n// Use emulator if on localhost\nif (window.location.hostname === \"localhost\") {\n  db.useEmulator(\"localhost\", 8080);\n}\n\n// Add participant data and trial data to db\nconst initParticipant = (participantId, studyId, startDate) => {\n  // return promise with value true if participant and study id match, false otherwise\n    return db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .set({ start_time: startDate, app_version: window.navigator.appVersion, app_platform: window.navigator.platform, results: []})\n    .then(()=>{\n      return true\n    })\n    .catch((error) => {\n      return false\n    });\n};\n\n// Add inidividual trials to db\nconst addToFirebase = (data) => {\n  console.log(data)\n  const participantId = data.participant_id;\n  const studyId = data.study_id;\n  const startDate = data.start_date\n  \n  db.collection(collectionName)\n    .doc(studyId)\n    .collection('participants')\n    .doc(participantId)\n    .collection('data')\n    .doc(startDate)\n    .update('results', firebase.firestore.FieldValue.arrayUnion(data))\n};\n\n// Export types that exists in Firestore\nexport {\n  db,\n  collectionName,\n  initParticipant,\n  addToFirebase\n};\n\nexport default firebase;","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"@fortawesome/fontawesome-free/css/all.css\";\n\nimport Login from \"./components/Login\";\nimport JsPsychExperiment from \"./components/JsPsychExperiment\";\n\nimport { jsPsych } from \"jspsych-react\";\nimport { getTurkUniqueId, getProlificId, sleep } from \"./lib/utils\";\nimport { initParticipant, addToFirebase } from \"./firebase\";\n\nimport { config } from \"./config/main\";\nimport { version } from \"../package.json\"\n\nfunction App() {\n  // Variables for time\n  const startDate = new Date().toISOString();\n  // Variables for login\n  const [loggedIn, setLogin] = useState(false);\n  const [ipcRenderer, setRenderer] = useState(false);\n  const [psiturk, setPsiturk] = useState(false);\n  const [envParticipantId, setEnvParticipantId] = useState(\"\");\n  const [envStudyId, setEnvStudyId] = useState(\"\");\n  const [currentMethod, setMethod] = useState(\"default\");\n  const [reject, setReject] = useState(false);\n\n  const query = new URLSearchParams(window.location.search);\n\n  // Validation functions for desktop case and firebase\n  const defaultValidation = async () => {\n    return true;\n  };\n  const firebaseValidation = (participantId, studyId) => {\n    return initParticipant(participantId, studyId, startDate);\n  };\n\n  // Adding data functions for firebase, electron adn Mturk\n  const defaultFunction = (data) => {};\n  const firebaseUpdateFunction = (data) => {\n    addToFirebase(data);\n  };\n  const desktopUpdateFunction = (data) => {\n    ipcRenderer.send(\"data\", data);\n  };\n  const psiturkUpdateFunction = (data) => {\n    psiturk.recordTrialData(data);\n  };\n\n  // On finish functions for electron, Mturk\n  const desktopFinishFunction = () => {\n    ipcRenderer.send(\"end\", \"true\");\n  };\n  const psiturkFinishFunction = () => {\n    const completePsiturk = async () => {\n      psiturk.saveData();\n      await sleep(5000);\n      psiturk.completeHIT();\n    };\n    completePsiturk();\n  };\n\n  // Function to add jspsych data on login\n  const setLoggedIn = useCallback(\n    (loggedIn, studyId, participantId) => {\n      if (loggedIn) {\n        jsPsych.data.addProperties({\n          participant_id: participantId,\n          study_id: studyId,\n          start_date: startDate,\n          task_version: version\n        });\n      }\n      setLogin(loggedIn);\n    },\n    [startDate]\n  );\n\n  // Login logic\n  useEffect(() => {\n    // For testing and debugging purposes\n    console.log(\"Turk:\", config.USE_MTURK);\n    console.log(\"Firebase:\", config.USE_FIREBASE);\n    console.log(\"Prolific:\", config.USE_PROLIFIC);\n    console.log(\"Electron:\", config.USE_ELECTRON);\n    console.log(\"Video:\", config.USE_CAMERA);\n    console.log(\"Volume:\", config.USE_VOLUME);\n    console.log(\"Event Marker:\", config.USE_EEG);\n    console.log(\"Photodiode:\", config.USE_PHOTODIODE);\n    // If on desktop\n    if (config.USE_ELECTRON) {\n      const { ipcRenderer } = window.require(\"electron\");\n      setRenderer(ipcRenderer);\n      ipcRenderer.send('updateEnvironmentVariables', config)\n      // If at home, fill in fields based on environment variables\n      const credentials = ipcRenderer.sendSync(\"syncCredentials\");\n      if (credentials.envParticipantId) {\n        setEnvParticipantId(credentials.envParticipantId);\n      }\n      if (credentials.envStudyId) {\n        setEnvStudyId(credentials.envStudyId);\n      }\n      setMethod(\"desktop\");\n    }\n    // If online\n    else {\n      // If MTURK\n      if (config.USE_MTURK) {\n        /* eslint-disable */\n        window.lodash = _.noConflict();\n        const turkId = getTurkUniqueId();\n        setPsiturk(new PsiTurk(turkId, \"/complete\"));\n        setMethod(\"mturk\");\n        setLoggedIn(true, \"mturk\", turkId);\n        /* eslint-enable */\n      }\n\n      // If prolific\n      else if (config.USE_PROLIFIC) {\n        const pID = getProlificId();\n        if (config.USE_FIREBASE && pID) {\n          setMethod(\"firebase\");\n          setLoggedIn(true, \"prolific\", pID);\n        } else {\n          setReject(true);\n        }\n      }\n\n      // If firebase\n      else if (config.USE_FIREBASE) {\n        setMethod(\"firebase\");\n        // Autologin with query parameters\n        const participantId = query.get(\"participantID\");\n        const studyId = query.get(\"studyID\");\n        if (participantId) {\n          setEnvParticipantId(participantId)\n        }\n        if (studyId) {\n          setEnvStudyId(studyId)\n        }\n      } else {\n        setReject(true);\n      }\n    }\n  // eslint-disable-next-line\n  }, []);\n\n  if (reject) {\n    return (\n      <div className=\"centered-h-v\">\n        <div className=\"width-50 alert alert-danger\">\n          Please ask your task provider to enable firebase.\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <>\n        {loggedIn ? (\n          <JsPsychExperiment\n            dataUpdateFunction={\n              {\n                desktop: desktopUpdateFunction,\n                firebase: firebaseUpdateFunction,\n                mturk: psiturkUpdateFunction,\n                default: defaultFunction,\n              }[currentMethod]\n            }\n            dataFinishFunction={\n              {\n                desktop: desktopFinishFunction,\n                mturk: psiturkFinishFunction,\n                firebase: defaultFunction,\n                default: defaultFunction,\n              }[currentMethod]\n            }\n          />\n        ) : (\n          <Login\n            validationFunction={\n              {\n                desktop: defaultValidation,\n                default: defaultValidation,\n                firebase: firebaseValidation,\n              }[currentMethod]\n            }\n            envParticipantId={envParticipantId}\n            envStudyId={envStudyId}\n            onLogin={setLoggedIn}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}